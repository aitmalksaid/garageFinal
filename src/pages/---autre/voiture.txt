
<template>
  <div class="page-container">
    <!-- Ajout de l'indicateur de chargement -->
    <div v-if="loading" class="loading-state">
      <p>Chargement des données...</p>
      <p v-if="error" class="error-message">{{ error }}</p>
    </div>

    <div v-else>
      <div class="page-header">
        <h1>Gestion des Véhicules</h1>
        <button @click="showForm = true" class="btn btn-primary">Nouveau Véhicule</button>
      </div>

      <!-- Formulaire -->
      <div v-if="showForm" class="form-modal">
        <div class="form-container">
          <h2>{{ editingVoiture ? 'Modifier' : 'Nouveau' }} Véhicule</h2>
          <form @submit.prevent="saveVoiture">
            <div class="form-group">
              <label>Immatriculation *</label>
              <input v-model="form.immatriculation" type="text" required>
            </div>

            <div class="form-group">
              <label>Marque *</label>
              <select v-model="form.marque" required @change="resetModele">
                <option disabled value="">Sélectionnez une marque</option>
                <option v-for="marqueName in Object.keys(carData).sort()" :key="marqueName" :value="marqueName">
                  {{ marqueName }}
                </option>
              </select>
            </div>

            <div class="form-group">
              <label>Modèle *</label>
              <select v-model="form.modele" required :disabled="!form.marque">
                <option disabled value="">
                  {{ form.marque ? (modelesDisponibles.length > 0 ? 'Sélectionnez un modèle' : 'Aucun modèle disponible') : 'Choisissez une marque' }}
                </option>
                <option v-for="modeleName in modelesDisponibles" :key="modeleName" :value="modeleName">
                  {{ modeleName }}
                </option>
              </select>
            </div>

            <div class="form-group">
              <label>Numéro de chassis</label>
              <input v-model="form.num_chassis" type="text">
            </div>
            <div class="form-group">
              <label>Date de mise en circulation</label>
              <input v-model="form.date_mec" type="date">
            </div>
            <div class="form-group">
              <label>Client</label>
              <select v-model="form.client_id">
                <option v-for="client in clients" :key="client.id" :value="client.id">
                  {{ client.nom }} {{ client.prenom }}
                </option>
              </select>
            </div>
            
            <div class="form-actions">
              <button type="submit" class="btn btn-primary">
                {{ editingVoiture ? 'Modifier' : 'Créer' }}
              </button>
              <button type="button" @click="cancelForm" class="btn btn-secondary">
                Annuler
              </button>
            </div>
          </form>
        </div>
      </div>

      <!-- Liste des voitures -->
      <div class="table-container">
        <table class="data-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Immatriculation</th>
              <th>Marque</th>
              <th>Modèle</th>
              <th>Numéro de chassis</th>
              <th>Date MEC</th>
              <th>Client</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="voiture in voitures" :key="voiture.id">
              <td>{{ voiture.id }}</td>
              <td>{{ voiture.immatriculation }}</td>
              <td>{{ voiture.marque }}</td>
              <td>{{ voiture.modele }}</td>
              <td>{{ voiture.num_chassis }}</td>
              <td>{{ voiture.date_mec }}</td>
              <td>{{ getClientName(voiture.client_id) }}</td>
              <td class="actions">
                <button @click="editVoiture(voiture)" class="btn-action btn-edit">
                  ??
                </button>
                <button @click="deleteVoiture(voiture.id)" class="btn-action btn-delete">
                  ???
                </button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</template>

// (This block is removed to avoid duplicate <script setup>)

<style scoped>
.page-container {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.form-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.form-container {
  background: white;
  padding: 30px;
  border-radius: 8px;
  width: 500px;
  max-width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
}

.form-container h2 {
  margin-bottom: 20px;
  color: #2c3e50;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #34495e;
}

.form-group input,
.form-group textarea,
.form-group select {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

select:disabled {
  background-color: #f2f2f2;
}

.form-actions {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.table-container {
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.data-table {
  width: 100%;
  border-collapse: collapse;
}

.data-table th,
.data-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.data-table th {
  background: #f8f9fa;
  font-weight: bold;
  color: #2c3e50;
}

.data-table tbody tr:hover {
  background: #f8f9fa;
}

.actions {
  white-space: nowrap;
}

.btn-action {
  padding: 6px 10px;
  margin: 0 2px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-edit {
  background: #f39c12;
}

.btn-delete {
  background: #e74c3c;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-primary {
  background: #3498db;
  color: white;
}

.btn-secondary {
  background: #95a5a6;
  color: white;
}

.btn:hover {
  opacity: 0.9;
}

.loading-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 20px;
  text-align: center;
}

.error-message {
  color: #e74c3c;
  margin-top: 10px;
  padding: 10px;
  background-color: #fde8e8;
  border-radius: 4px;
  border: 1px solid #f5b7b1;
}
</template>

<script setup>
import { ref, computed, watch, nextTick, onMounted } from 'vue'
import { useDataService } from '../composables/useDataService'

// Ajout de l'état de chargement
const loading = ref(true)
const error = ref(null)

// Modification de la fonction loadAllData pour gérer le chargement
const { voitures, clients, dataService, loadAllData: originalLoadAllData } = useDataService()

const loadAllData = async () => {
  loading.value = true
  error.value = null
  try {
    await originalLoadAllData()
    if (!voitures.value || voitures.value.length === 0) {
      throw new Error('Aucune donnée véhicule trouvée')
    }
  } catch (error) {
    console.error('Erreur critique:', error)
    error.value = `Échec du chargement: ${error.message}`
  } finally {
    loading.value = false
  }
}

// Initialiser les données au montage du composant
onMounted(loadAllData)

const showForm = ref(false)
const editingVoiture = ref(null)

// --- START: New data and logic for dynamic selects ---
const carData = ref({
  'Peugeot': ['208', '308', '508', '2008', '3008', '5008', 'Partner'],
  'Citroën': ['C3', 'C4', 'C5 Aircross', 'Berlingo', 'Jumpy'],
  'Renault': ['Clio', 'Megane', 'Captur', 'Kadjar', 'Kangoo'],
  'Dacia': ['Sandero', 'Logan', 'Duster', 'Spring'],
  'Ford': ['Fiesta', 'Focus', 'Puma', 'Kuga', 'Ranger'],
  'Volkswagen': ['Polo', 'Golf', 'T-Roc', 'Tiguan', 'Passat'],
  'Mercedes-Benz': ['Classe A', 'Classe C', 'Classe E', 'GLA', 'GLC'],
  'BMW': ['Série 1', 'Série 3', 'Série 5', 'X1', 'X3', 'X5'],
  'Audi': ['A1', 'A3', 'A4', 'Q2', 'Q3', 'Q5'],
  'Toyota': ['Yaris', 'Corolla', 'C-HR', 'RAV4', 'Hilux'],
  'Hyundai': ['i10', 'i20', 'i30', 'Tucson', 'Kona'],
  'Kia': ['Picanto', 'Rio', 'Ceed', 'Sportage', 'Stonic'],
  'Fiat': ['500', 'Panda', 'Tipo', 'Fiorino'],
  'Opel': ['Corsa', 'Astra', 'Mokka', 'Crossland'],
  'Skoda': ['Fabia', 'Octavia', 'Kamiq', 'Karoq']
});

const form = ref({
  immatriculation: '',
  marque: '',
  modele: '',
  num_chassis: '',
  date_mec: '',
  client_id: null
})

const modelesDisponibles = computed(() => {
  if (form.value.marque && carData.value[form.value.marque]) {
    return carData.value[form.value.marque].sort();
  }
  return [];
});

watch(() => form.value.marque, () => {
  form.value.modele = '';
})

const resetModele = () => {
  form.value.modele = '';
}

const saveVoiture = async () => {
  try {
    if (editingVoiture.value) {
      await dataService.updateVoiture(editingVoiture.value.id, form.value)
    } else {
      await dataService.createVoiture(form.value)
    }
    await loadAllData()
    cancelForm()
  } catch (error) {
    console.error('Erreur lors de la sauvegarde du véhicule:', error)
    alert(`Erreur lors de ${editingVoiture.value ? 'la modification' : 'la création'} du véhicule: ${error.message}`)
  }
};

const editVoiture = (voiture) => {
  editingVoiture.value = voiture
  form.value = { ...voiture }
  showForm.value = true
}

const deleteVoiture = async (id) => {
  if (confirm('Êtes-vous sûr de vouloir supprimer ce véhicule ?')) {
    try {
      await dataService.deleteVoiture(id)
      await loadAllData()
    } catch (err) {
      console.error('Erreur lors de la suppression du véhicule:', err)
      alert(`Erreur lors de la suppression du véhicule: ${err.message}`)
    }
  }
}

const cancelForm = () => {
  showForm.value = false
  editingVoiture.value = null
  form.value = {
    immatriculation: '',
    marque: '',
    modele: '',
    num_chassis: '',
    date_mec: '',
    client_id: null
  }
  
}

const getClientName = (clientId) => {
  const client = clients.value.find(c => c.id === clientId)
  return client ? `${client.nom} ${client.prenom}` : 'Client inconnu'
}
</script>

<style scoped>
.page-container {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.form-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.form-container {
  background: white;
  padding: 30px;
  border-radius: 8px;
  width: 500px;
  max-width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
}

.form-container h2 {
  margin-bottom: 20px;
  color: #2c3e50;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #34495e;
}

.form-group input,
.form-group textarea,
.form-group select {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

select:disabled {
  background-color: #f2f2f2;
}

.form-actions {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.table-container {
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.data-table {
  width: 100%;
  border-collapse: collapse;
}

.data-table th,
.data-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.data-table th {
  background: #f8f9fa;
  font-weight: bold;
  color: #2c3e50;
}

.data-table tbody tr:hover {
  background: #f8f9fa;
}

.actions {
  white-space: nowrap;
}

.btn-action {
  padding: 6px 10px;
  margin: 0 2px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-edit {
  background: #f39c12;
}

.btn-delete {
  background: #e74c3c;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
// (This block is removed to avoid duplicate <style scoped>)
</template>
}
</script>

<style scoped>
.page-container {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.form-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.form-container {
  background: white;
  padding: 30px;
  border-radius: 8px;
  width: 500px;
  max-width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
}

.form-container h2 {
  margin-bottom: 20px;
  color: #2c3e50;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #34495e;
}

.form-group input,
.form-group textarea,
.form-group select {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

select:disabled {
  background-color: #f2f2f2;
}

.form-actions {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.table-container {
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.data-table {
  width: 100%;
  border-collapse: collapse;
}

.data-table th,
.data-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.data-table th {
  background: #f8f9fa;
  font-weight: bold;
  color: #2c3e50;
}

.data-table tbody tr:hover {
  background: #f8f9fa;
}

.actions {
  white-space: nowrap;
}

.btn-action {
  padding: 6px 10px;
  margin: 0 2px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-edit {
  background: #f39c12;
}

.btn-delete {
  background: #e74c3c;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-primary {
  background: #3498db;
  color: white;
}

.btn-secondary {
  background: #95a5a6;
  color: white;
}

.btn:hover {
  opacity: 0.9;
}
</template>

<script setup>
import { ref, computed, watch, nextTick, onMounted } from 'vue'
import { useDataService } from '../composables/useDataService'

// Ajout de l'état de chargement
const loading = ref(true)
const error = ref(null)

// Modification de la fonction loadAllData pour gérer le chargement
const { voitures, clients, dataService, loadAllData: originalLoadAllData } = useDataService()

const loadAllData = async () => {
  loading.value = true
  error.value = null
  try {
    await originalLoadAllData()
    if (!voitures.value || voitures.value.length === 0) {
      throw new Error('Aucune donnée véhicule trouvée')
    }
  } catch (error) {
    console.error('Erreur critique:', error)
    error.value = `Échec du chargement: ${error.message}`
  } finally {
    loading.value = false
  }
}

// Initialiser les données au montage du composant
onMounted(loadAllData)

const showForm = ref(false)
const editingVoiture = ref(null)

// --- START: New data and logic for dynamic selects ---
const carData = ref({
  'Peugeot': ['208', '308', '508', '2008', '3008', '5008', 'Partner'],
  'Citroën': ['C3', 'C4', 'C5 Aircross', 'Berlingo', 'Jumpy'],
  'Renault': ['Clio', 'Megane', 'Captur', 'Kadjar', 'Kangoo'],
  'Dacia': ['Sandero', 'Logan', 'Duster', 'Spring'],
  'Ford': ['Fiesta', 'Focus', 'Puma', 'Kuga', 'Ranger'],
  'Volkswagen': ['Polo', 'Golf', 'T-Roc', 'Tiguan', 'Passat'],
  'Mercedes-Benz': ['Classe A', 'Classe C', 'Classe E', 'GLA', 'GLC'],
  'BMW': ['Série 1', 'Série 3', 'Série 5', 'X1', 'X3', 'X5'],
  'Audi': ['A1', 'A3', 'A4', 'Q2', 'Q3', 'Q5'],
  'Toyota': ['Yaris', 'Corolla', 'C-HR', 'RAV4', 'Hilux'],
  'Hyundai': ['i10', 'i20', 'i30', 'Tucson', 'Kona'],
  'Kia': ['Picanto', 'Rio', 'Ceed', 'Sportage', 'Stonic'],
  'Fiat': ['500', 'Panda', 'Tipo', 'Fiorino'],
  'Opel': ['Corsa', 'Astra', 'Mokka', 'Crossland'],
  'Skoda': ['Fabia', 'Octavia', 'Kamiq', 'Karoq']
});

const form = ref({
  immatriculation: '',
  marque: '',
  modele: '',
  num_chassis: '',
  date_mec: '',
  client_id: null
})

const modelesDisponibles = computed(() => {
  if (form.value.marque && carData.value[form.value.marque]) {
    return carData.value[form.value.marque].sort();
  }
  return [];
});

watch(() => form.value.marque, () => {
  form.value.modele = '';
})

const resetModele = () => {
  form.value.modele = '';
}

const saveVoiture = async () => {
  try {
    if (editingVoiture.value) {
      await dataService.updateVoiture(editingVoiture.value.id, form.value)
    } else {
      await dataService.createVoiture(form.value)
    }
    await loadAllData()
    cancelForm()
  } catch (error) {
    console.error('Erreur lors de la sauvegarde du véhicule:', error)
    alert(`Erreur lors de ${editingVoiture.value ? 'la modification' : 'la création'} du véhicule: ${error.message}`)
  }
};

const editVoiture = (voiture) => {
  editingVoiture.value = voiture
  form.value = { ...voiture }
  showForm.value = true
}

const deleteVoiture = async (id) => {
  if (confirm('Êtes-vous sûr de vouloir supprimer ce véhicule ?')) {
    try {
      await dataService.deleteVehicle(id)
      await loadAllData()
    } catch (error) {
      console.error('Erreur lors de la suppression du véhicule:', error)
      alert(`Erreur lors de la suppression du véhicule: ${error.message}`)
    }
  }
}

const cancelForm = () => {
  showForm.value = false
  editingVoiture.value = null
  form.value = {
    immatriculation: '',
    marque: '',
    modele: '',
    num_chassis: '',
    date_mec: '',
    client_id: null
  }
  
}

const getClientName = (clientId) => {
  const client = clients.value.find(c => c.id === clientId)
  return client ? `${client.nom} ${client.prenom}` : 'Client inconnu'
}
</script>

<style scoped>
.page-container {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.form-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.form-container {
  background: white;
  padding: 30px;
  border-radius: 8px;
  width: 500px;
  max-width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
}

.form-container h2 {
  margin-bottom: 20px;
  color: #2c3e50;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #34495e;
}

.form-group input,
.form-group textarea,
.form-group select {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

select:disabled {
  background-color: #f2f2f2;
}

.form-actions {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.table-container {
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.data-table {
  width: 100%;
  border-collapse: collapse;
}

.data-table th,
.data-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.data-table th {
  background: #f8f9fa;
  font-weight: bold;
  color: #2c3e50;
}

.data-table tbody tr:hover {
  background: #f8f9fa;
}

.actions {
  white-space: nowrap;
}

.btn-action {
  padding: 6px 10px;
  margin: 0 2px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-edit {
  background: #f39c12;
}

.btn-delete {
  background: #e74c3c;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-primary {
  background: #3498db;
  color: white;
}

.btn-secondary {
  background: #95a5a6;
  color: white;
}

.btn:hover {
  opacity: 0.9;
}
</template>

<script setup>
import { ref, computed, watch, nextTick, onMounted } from 'vue'
import { useDataService } from '../composables/useDataService'

// Ajout de l'état de chargement
const loading = ref(true)
const error = ref(null)

// Modification de la fonction loadAllData pour gérer le chargement
const { voitures, clients, dataService, loadAllData: originalLoadAllData } = useDataService()

const loadAllData = async () => {
  loading.value = true
  error.value = null
  try {
    await originalLoadAllData()
    if (!voitures.value || voitures.value.length === 0) {
      throw new Error('Aucune donnée véhicule trouvée')
    }
  } catch (error) {
    console.error('Erreur critique:', error)
    error.value = `Échec du chargement: ${error.message}`
  } finally {
    loading.value = false
  }
}

// Initialiser les données au montage du composant
onMounted(loadAllData)

const showForm = ref(false)
const editingVoiture = ref(null)

// --- START: New data and logic for dynamic selects ---
const carData = ref({
  'Peugeot': ['208', '308', '508', '2008', '3008', '5008', 'Partner'],
  'Citroën': ['C3', 'C4', 'C5 Aircross', 'Berlingo', 'Jumpy'],
  'Renault': ['Clio', 'Megane', 'Captur', 'Kadjar', 'Kangoo'],
  'Dacia': ['Sandero', 'Logan', 'Duster', 'Spring'],
  'Ford': ['Fiesta', 'Focus', 'Puma', 'Kuga', 'Ranger'],
  'Volkswagen': ['Polo', 'Golf', 'T-Roc', 'Tiguan', 'Passat'],
  'Mercedes-Benz': ['Classe A', 'Classe C', 'Classe E', 'GLA', 'GLC'],
  'BMW': ['Série 1', 'Série 3', 'Série 5', 'X1', 'X3', 'X5'],
  'Audi': ['A1', 'A3', 'A4', 'Q2', 'Q3', 'Q5'],
  'Toyota': ['Yaris', 'Corolla', 'C-HR', 'RAV4', 'Hilux'],
  'Hyundai': ['i10', 'i20', 'i30', 'Tucson', 'Kona'],
  'Kia': ['Picanto', 'Rio', 'Ceed', 'Sportage', 'Stonic'],
  'Fiat': ['500', 'Panda', 'Tipo', 'Fiorino'],
  'Opel': ['Corsa', 'Astra', 'Mokka', 'Crossland'],
  'Skoda': ['Fabia', 'Octavia', 'Kamiq', 'Karoq']
});

const form = ref({
  immatriculation: '',
  marque: '',
  modele: '',
  num_chassis: '',
  date_mec: '',
  client_id: null
})

const modelesDisponibles = computed(() => {
  if (form.value.marque && carData.value[form.value.marque]) {
    return carData.value[form.value.marque].sort();
  }
  return [];
});

watch(() => form.value.marque, () => {
  form.value.modele = '';
})

const resetModele = () => {
  form.value.modele = '';
}

const saveVoiture = async () => {
  try {
    if (editingVoiture.value) {
      await dataService.updateVoiture(editingVoiture.value.id, form.value)
    } else {
      await dataService.createVoiture(form.value)
    }
    await loadAllData()
    cancelForm()
  } catch (error) {
    console.error('Erreur lors de la sauvegarde du véhicule:', error)
    alert(`Erreur lors de ${editingVoiture.value ? 'la modification' : 'la création'} du véhicule: ${error.message}`)
  }
};

const editVoiture = (voiture) => {
  editingVoiture.value = voiture
  form.value = { ...voiture }
  showForm.value = true
}

const deleteVoiture = async (id) => {
  if (confirm('Êtes-vous sûr de vouloir supprimer ce véhicule ?')) {
    try {
      await dataService.deleteVehicle(id)
      await loadAllData()
    } catch (error) {
      console.error('Erreur lors de la suppression du véhicule:', error)
      alert(`Erreur lors de la suppression du véhicule: ${error.message}`)
    }
  }
}

const cancelForm = () => {
  showForm.value = false
  editingVoiture.value = null
  form.value = {
    immatriculation: '',
    marque: '',
    modele: '',
    num_chassis: '',
    date_mec: '',
    client_id: null
  }
  
}

const getClientName = (clientId) => {
  const client = clients.value.find(c => c.id === clientId)
  return client ? `${client.nom} ${client.prenom}` : 'Client inconnu'
}
</script>

<style scoped>
.page-container {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.form-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.form-container {
  background: white;
  padding: 30px;
  border-radius: 8px;
  width: 500px;
  max-width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
}

.form-container h2 {
  margin-bottom: 20px;
  color: #2c3e50;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #34495e;
}

.form-group input,
.form-group textarea,
.form-group select {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

select:disabled {
  background-color: #f2f2f2;
}

.form-actions {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.table-container {
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.data-table {
  width: 100%;
  border-collapse: collapse;
}

.data-table th,
.data-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.data-table th {
  background: #f8f9fa;
  font-weight: bold;
  color: #2c3e50;
}

.data-table tbody tr:hover {
  background: #f8f9fa;
}

.actions {
  white-space: nowrap;
}

.btn-action {
  padding: 6px 10px;
  margin: 0 2px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-edit {
  background: #f39c12;
}

.btn-delete {
  background: #e74c3c;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-primary {
  background: #3498db;
  color: white;
}

.btn-secondary {
  background: #95a5a6;
  color: white;
}

.btn:hover {
  opacity: 0.9;
}
</template>

<script setup>
import { ref, computed, watch, nextTick, onMounted } from 'vue'
import { useDataService } from '../composables/useDataService'

// Ajout de l'état de chargement
const loading = ref(true)
const error = ref(null)

// Modification de la fonction loadAllData pour gérer le chargement
const { voitures, clients, dataService, loadAllData: originalLoadAllData } = useDataService()

const loadAllData = async () => {
  loading.value = true
  error.value = null
  try {
    await originalLoadAllData()
    if (!voitures.value || voitures.value.length === 0) {
      throw new Error('Aucune donnée véhicule trouvée')
    }
  } catch (error) {
    console.error('Erreur critique:', error)
    error.value = `Échec du chargement: ${error.message}`
  } finally {
    loading.value = false
  }
}

// Initialiser les données au montage du composant
onMounted(loadAllData)

const showForm = ref(false)
const editingVoiture = ref(null)

// --- START: New data and logic for dynamic selects ---
const carData = ref({
  'Peugeot': ['208', '308', '508', '2008', '3008', '5008', 'Partner'],
  'Citroën': ['C3', 'C4', 'C5 Aircross', 'Berlingo', 'Jumpy'],
  'Renault': ['Clio', 'Megane', 'Captur', 'Kadjar', 'Kangoo'],
  'Dacia': ['Sandero', 'Logan', 'Duster', 'Spring'],
  'Ford': ['Fiesta', 'Focus', 'Puma', 'Kuga', 'Ranger'],
  'Volkswagen': ['Polo', 'Golf', 'T-Roc', 'Tiguan', 'Passat'],
  'Mercedes-Benz': ['Classe A', 'Classe C', 'Classe E', 'GLA', 'GLC'],
  'BMW': ['Série 1', 'Série 3', 'Série 5', 'X1', 'X3', 'X5'],
  'Audi': ['A1', 'A3', 'A4', 'Q2', 'Q3', 'Q5'],
  'Toyota': ['Yaris', 'Corolla', 'C-HR', 'RAV4', 'Hilux'],
  'Hyundai': ['i10', 'i20', 'i30', 'Tucson', 'Kona'],
  'Kia': ['Picanto', 'Rio', 'Ceed', 'Sportage', 'Stonic'],
  'Fiat': ['500', 'Panda', 'Tipo', 'Fiorino'],
  'Opel': ['Corsa', 'Astra', 'Mokka', 'Crossland'],
  'Skoda': ['Fabia', 'Octavia', 'Kamiq', 'Karoq']
});

const form = ref({
  immatriculation: '',
  marque: '',
  modele: '',
  num_chassis: '',
  date_mec: '',
  client_id: null
})

const modelesDisponibles = computed(() => {
  if (form.value.marque && carData.value[form.value.marque]) {
    return carData.value[form.value.marque].sort();
  }
  return [];
});

watch(() => form.value.marque, () => {
  form.value.modele = '';
})

const resetModele = () => {
  form.value.modele = '';
}

const saveVoiture = async () => {
  try {
    if (editingVoiture.value) {
      await dataService.updateVoiture(editingVoiture.value.id, form.value)
    } else {
      await dataService.createVoiture(form.value)
    }
    await loadAllData()
    cancelForm()
  } catch (error) {
    console.error('Erreur lors de la sauvegarde du véhicule:', error)
    alert(`Erreur lors de ${editingVoiture.value ? 'la modification' : 'la création'} du véhicule: ${error.message}`)
  }
};

const editVoiture = (voiture) => {
  editingVoiture.value = voiture
  form.value = { ...voiture }
  showForm.value = true
}

const deleteVoiture = async (id) => {
  if (confirm('Êtes-vous sûr de vouloir supprimer ce véhicule ?')) {
    try {
      await dataService.deleteVehicle(id)
      await loadAllData()
    } catch (error) {
      console.error('Erreur lors de la suppression du véhicule:', error)
      alert(`Erreur lors de la suppression du véhicule: ${error.message}`)
    }
  }
}

const cancelForm = () => {
  showForm.value = false
  editingVoiture.value = null
  form.value = {
    immatriculation: '',
    marque: '',
    modele: '',
    num_chassis: '',
    date_mec: '',
    client_id: null
  }
  
}

const getClientName = (clientId) => {
  const client = clients.value.find(c => c.id === clientId)
  return client ? `${client.nom} ${client.prenom}` : 'Client inconnu'
}
</script>

<style scoped>
.page-container {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.form-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.form-container {
  background: white;
  padding: 30px;
  border-radius: 8px;
  width: 500px;
  max-width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
}

.form-container h2 {
  margin-bottom: 20px;
  color: #2c3e50;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #34495e;
}

.form-group input,
.form-group textarea,
.form-group select {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

select:disabled {
  background-color: #f2f2f2;
}

.form-actions {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.table-container {
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.data-table {
  width: 100%;
  border-collapse: collapse;
}

.data-table th,
.data-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.data-table th {
  background: #f8f9fa;
  font-weight: bold;
  color: #2c3e50;
}

.data-table tbody tr:hover {
  background: #f8f9fa;
}

.actions {
  white-space: nowrap;
}

.btn-action {
  padding: 6px 10px;
  margin: 0 2px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-edit {
  background: #f39c12;
}

.btn-delete {
  background: #e74c3c;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-primary {
  background: #3498db;
  color: white;
}

.btn-secondary {
  background: #95a5a6;
  color: white;
}

.btn:hover {
  opacity: 0.9;
}
</template>

<script setup>
import { ref, computed, watch, nextTick, onMounted } from 'vue'
import { useDataService } from '../composables/useDataService'

// Ajout de l'état de chargement
const loading = ref(true)
const error = ref(null)

// Modification de la fonction loadAllData pour gérer le chargement
const { voitures, clients, dataService, loadAllData: originalLoadAllData } = useDataService()

const loadAllData = async () => {
  loading.value = true
  error.value = null
  try {
    await originalLoadAllData()
    if (!voitures.value || voitures.value.length === 0) {
      throw new Error('Aucune donnée véhicule trouvée')
    }
  } catch (error) {
    console.error('Erreur critique:', error)
    error.value = `Échec du chargement: ${error.message}`
  } finally {
    loading.value = false
  }
}

// Initialiser les données au montage du composant
onMounted(loadAllData)

const showForm = ref(false)
const editingVoiture = ref(null)

// --- START: New data and logic for dynamic selects ---
const carData = ref({
  'Peugeot': ['208', '308', '508', '2008', '3008', '5008', 'Partner'],
  'Citroën': ['C3', 'C4', 'C5 Aircross', 'Berlingo', 'Jumpy'],
  'Renault': ['Clio', 'Megane', 'Captur', 'Kadjar', 'Kangoo'],
  'Dacia': ['Sandero', 'Logan', 'Duster', 'Spring'],
  'Ford': ['Fiesta', 'Focus', 'Puma', 'Kuga', 'Ranger'],
  'Volkswagen': ['Polo', 'Golf', 'T-Roc', 'Tiguan', 'Passat'],
  'Mercedes-Benz': ['Classe A', 'Classe C', 'Classe E', 'GLA', 'GLC'],
  'BMW': ['Série 1', 'Série 3', 'Série 5', 'X1', 'X3', 'X5'],
  'Audi': ['A1', 'A3', 'A4', 'Q2', 'Q3', 'Q5'],
  'Toyota': ['Yaris', 'Corolla', 'C-HR', 'RAV4', 'Hilux'],
  'Hyundai': ['i10', 'i20', 'i30', 'Tucson', 'Kona'],
  'Kia': ['Picanto', 'Rio', 'Ceed', 'Sportage', 'Stonic'],
  'Fiat': ['500', 'Panda', 'Tipo', 'Fiorino'],
  'Opel': ['Corsa', 'Astra', 'Mokka', 'Crossland'],
  'Skoda': ['Fabia', 'Octavia', 'Kamiq', 'Karoq']
});

const form = ref({
  immatriculation: '',
  marque: '',
  modele: '',
  num_chassis: '',
  date_mec: '',
  client_id: null
})

const modelesDisponibles = computed(() => {
  if (form.value.marque && carData.value[form.value.marque]) {
    return carData.value[form.value.marque].sort();
  }
  return [];
});

watch(() => form.value.marque, () => {
  form.value.modele = '';
})

const resetModele = () => {
  form.value.modele = '';
}

const saveVoiture = async () => {
  try {
    if (editingVoiture.value) {
      await dataService.updateVoiture(editingVoiture.value.id, form.value)
    } else {
      await dataService.createVoiture(form.value)
    }
    await loadAllData()
    cancelForm()
  } catch (error) {
    console.error('Erreur lors de la sauvegarde du véhicule:', error)
    alert(`Erreur lors de ${editingVoiture.value ? 'la modification' : 'la création'} du véhicule: ${error.message}`)
  }
};

const editVoiture = (voiture) => {
  editingVoiture.value = voiture
  form.value = { ...voiture }
  showForm.value = true
}

const deleteVoiture = async (id) => {
  if (confirm('Êtes-vous sûr de vouloir supprimer ce véhicule ?')) {
    try {
      await dataService.deleteVehicle(id)
      await loadAllData()
    } catch (error) {
      console.error('Erreur lors de la suppression du véhicule:', error)
      alert(`Erreur lors de la suppression du véhicule: ${error.message}`)
    }
  }
}

const cancelForm = () => {
  showForm.value = false
  editingVoiture.value = null
  form.value = {
    immatriculation: '',
    marque: '',
    modele: '',
    num_chassis: '',
    date_mec: '',
    client_id: null
  }
  
}

const getClientName = (clientId) => {
  const client = clients.value.find(c => c.id === clientId)
  return client ? `${client.nom} ${client.prenom}` : 'Client inconnu'
}
</script>

<style scoped>
.page-container {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
}

.form-modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0,0,0,0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.form-container {
  background: white;
  padding: 30px;
  border-radius: 8px;
  width: 500px;
  max-width: 90vw;
  max-height: 90vh;
  overflow-y: auto;
}

.form-container h2 {
  margin-bottom: 20px;
  color: #2c3e50;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #34495e;
}

.form-group input,
.form-group textarea,
.form-group select {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

select:disabled {
  background-color: #f2f2f2;
}

.form-actions {
  display: flex;
  gap: 10px;
  justify-content: flex-end;
  margin-top: 20px;
}

.table-container {
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.data-table {
  width: 100%;
  border-collapse: collapse;
}

.data-table th,
.data-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.data-table th {
  background: #f8f9fa;
  font-weight: bold;
  color: #2c3e50;
}

.data-table tbody tr:hover {
  background: #f8f9fa;
}

.actions {
  white-space: nowrap;
}

.btn-action {
  padding: 6px 10px;
  margin: 0 2px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-edit {
  background: #f39c12;
}

.btn-delete {
  background: #e74c3c;
}

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.btn-primary {
  background: #3498db;
  color: white;
}

.btn-secondary {
  background: #95a5a6;
  color: white;
}

.btn:hover {
  opacity: 0.9;
}
</template>

<script setup>
import { ref, computed, watch, nextTick, onMounted } from 'vue'
import { useDataService } from '../composables/useDataService'

// Ajout de l'état de chargement
const loading = ref(true)
const error = ref(null)

// Modification de la fonction loadAllData pour gérer le chargement
const { voitures, clients, dataService, loadAllData: originalLoadAllData } = useDataService()

const loadAllData = async () => {
  loading.value = true
  error.value = null
  try {
    await originalLoadAllData()
    if (!voitures.value || voitures.value.length === 0) {
      throw new Error('Aucune donnée véhicule trouvée')
    }
  } catch (error) {
    console.error('Erreur critique:', error)
    error.value = `Échec du chargement: ${error.message}`
  } finally {
    loading.value = false
  }
}

// Initialiser les données au montage du composant
onMounted(loadAllData)

const showForm = ref(false)
const editingVoiture = ref(null)

// --- START: New data and logic for dynamic selects ---
const carData = ref({
  'Peugeot': ['208', '308', '508', '2008', '3008', '5008', 'Partner'],
  'Citroën': ['C3', 'C4', 'C5 Aircross', 'Berlingo', 'Jumpy'],
  'Renault': ['Clio', 'Megane', 'Captur', 'Kadjar', 'Kangoo'],
  'Dacia': ['Sandero', 'Logan', 'Duster', 'Spring'],
  'Ford': ['Fiesta', 'Focus', 'Puma', 'Kuga', 'Ranger'],
  'Volkswagen': ['Polo', 'Golf', 'T-Roc', 'Tiguan', 'Passat'],
  'Mercedes-Benz': ['Classe A', 'Classe C', 'Classe E', 'GLA', 'GLC'],
  'BMW': ['Série 1', 'Série 3', 'Série 5', 'X1', 'X3', 'X5'],
  'Audi': ['A1', 'A3', 'A4', 'Q2', 'Q3', 'Q5'],
  'Toyota': ['Yaris', 'Corolla', 'C-HR', 'RAV4', 'Hilux'],
  'Hyundai': ['i10', 'i20', 'i30', 'Tucson', 'Kona'],
  'Kia': ['Picanto', 'Rio', 'Ceed', 'Sportage', 'Stonic'],
  'Fiat': ['500', 'Panda', 'Tipo', 'Fiorino'],
  'Opel': ['Corsa', 'Astra', 'Mokka', 'Crossland'],
  'Skoda': ['Fabia', 'Octavia', 'Kamiq', 'Karoq']
});

const form = ref({
  immatriculation: '',
  marque: '',
  modele: '',
  num_chassis: '',
  date_mec: '',
  client_id: null
})

const modelesDisponibles = computed(() => {
  if (form.value.marque && carData.value[form.value.marque]) {
    return carData.value[form.value.marque].sort();
  }
  return [];
});

watch(() => form.value.marque, () => {
  form.value.modele = '';
})

const resetModele = () => {
  form.value.modele = '';
}

const saveVoiture = async () => {
  try {
    if (editingVoiture.value) {
      await dataService.updateVoiture(editingVoiture.value.id, form.value)
    } else {
      await dataService.createVoiture(form.value)
    }
    await loadAllData()
    cancelForm()
  } catch (error) {
    console.error('Erreur lors de la sauvegarde du véhicule:', error)
    alert(`Erreur lors de ${editingVoiture.value ? 'la modification' : 'la création'} du véhicule: ${error.message}`)
  }
};

const editVoiture = (voiture) => {
  editingVoiture.value = voiture
  form.value = { ...voiture }
  showForm.value = true
}

const deleteVoiture = async (id) => {
  if (confirm('Êtes-vous sûr de vouloir supprimer ce véhicule ?')) {
    try {
      await dataService.deleteVehicle(id)
      await loadAllData()
    } catch (error) {
      console.error('Erreur lors de la suppression du véhicule:', error)
      alert(`Erreur lors de la suppression du véhicule: ${error.message}`)
    }
  }
}

const cancelForm = () => {
  showForm.value = false
  editingVoiture.value = null
  form.value = {
    immatriculation: '',
    marque: '',
    modele: '',
    num_chassis: '',
    date_mec: '',